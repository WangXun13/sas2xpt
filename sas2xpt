#########################[ START STUDY HEADER  ]################################
#  Property of SANOFI   
#                                                                   
#  Program Name            : sas2xpt.R                                                          
#  Program Purpose         : Creation of XPT files for a list of SAS datasets                           
#                                          
#  Compound/Study/Analysis :                                                                 
#  Program Author          : Xun Wang (U1007283/CN/EXT)   
#  Date Completed          : 21May2025                                                      
#  System                  : R - eWise environment                                                              
#   
#  Revision History                                                                       
#  ---------------------------------------------------------------------
#  Revision Date           :                                                              
#  Revised by              :                                                              
#  Revision Description    :                                                              
#########################[ STOP STUDY HEADER  ]#################################

#########################[       NOTICE       ]#########################
#  Please note that length for SAS dataset name to be exported to XPT files  
#  must be less than or equal to 8.
################################################################################

sas2xpt <- function(input_dir = NULL,
                    output_dir = NULL,
                    include = NULL,
                    exclude = NULL) {
  
  # Get sas datasets per function parameters--------------------------------------
  
  ## all sas datasets in input direction
  all_sasds_file <- list.files(
    path = input_dir,
    pattern = "*.sas7bdat$",
    full.names = FALSE,
    ignore.case = TRUE)
  
  ## if there are not any sas datasets in the input direction.
  if (length(all_sasds_file) == 0) {
    message("No sas datasets in the direction: ", input_dir)
    return(invisible(NULL))
  }  
  
  ## get sas datasets name  
  all_sasds_name <- tools::file_path_sans_ext(all_sasds_file)
  
  ## if include or exclude parameters are not empty.  
  if (!is.null(include)) {
    selected_sasds_file <- all_sasds_file[all_sasds_name %in% include]
  } else {
    selected_sasds_file <- all_sasds_file
  }
  
  if (!is.null(exclude)) {
    selected_sasds_file <- selected_sasds_file[!all_sasds_name %in% exclude]
  }
  
  ## if there are not any sas datasets after filtering.
  if (length(selected_sasds_file) == 0) {
    message("No sas datasets after filtering")
    return(invisible(NULL))
  }
  
  # Generate a dataframe for conversion log --------------------------------------
  
  conversion_log <- dplyr::tibble(
    sas = character(),
    xpt = character(),
    rows = integer(),
    cols = integer(),
    file_size_mb = numeric(),
    conversion_time = character(),
    status = character()
  )
  
  for (sasds_file in selected_sasds_file) {
    start_time <- Sys.time()
    sasds_name <- tools::file_path_sans_ext(sasds_file)
    sasds_path <- file.path(input_dir, sasds_file)
    xpt_file <- paste0(sasds_name, ".xpt")
    xpt_path <- file.path(output_dir, xpt_file)
    
    tryCatch({
      
      sasds <- haven::read_sas(sasds_path)
      
      haven::write_xpt(sasds, xpt_path, version = 5)
      
      file_size <- file.size(sasds_path) / (1024 * 1024)
      
      conversion_log <- dplyr::add_row(
        conversion_log,
        sas = sasds_name,
        xpt = xpt_path,
        rows = nrow(sasds),
        cols = ncol(sasds),
        file_size_mb = round(file_size, 2),
        conversion_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
        status = "Success"
      )
      
      message(sprintf("Conversion Success: %s (%.2f MB) -> %s",
                      sasds_file, file_size, xpt_file))
      
    }, error = function(e) {
      
      conversion_log <- dplyr::add_row(
        conversion_log,
        sas = sasds_name,
        xpt = xpt_path,
        rows = NA,
        cols = NA,
        file_size_mb = NA,
        conversion_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
        status = paste("Error:", conditionMessage(e))
      )
      
      message("Conversion Fail: ", sasds_file, " - ", conditionMessage(e))
    })
  }
  
  message("\nConversion summary:")
  message("Success: ", sum(conversion_log$status == "Success"))
  message("Fial: ", sum(conversion_log$status != "Success"))
  message("output direction: ", output_dir)
  
  return(conversion_log)
  
} 
